"use client"; // Indica que este componente √© executado no cliente (Next.js)

import { useEffect, useRef, useState } from "react"; // Importa hooks do React
// useRef: Permite criar refer√™ncias mut√°veis que persistem entre renderiza√ß√µes para acessar elementos DOM sem causar re-renderiza√ß√µes.
import styles from "./page1.module.css"; // Importa estilos CSS do m√≥dulo

const TOKEN = process.env.NEXT_PUBLIC_MAPBOX_TOKEN; // Obt√©m o token do Mapbox das vari√°veis de ambiente

export default function Geolocalizacao() {
    const [localiza√ß√£o, setLocaliza√ß√£o] = useState(null); // Estado para armazenar a localiza√ß√£o do usu√°rio
    const mapaRef = useRef(null); // Refer√™ncia para o elemento do mapa

    useEffect(() => {
        // Carrega o CSS do Mapbox dinamicamente
        const link = document.createElement("link"); // Cria elemento <link>
        link.href = "https://api.mapbox.com/mapbox-gl-js/v3.0.0/mapbox-gl.css"; // Define o endere√ßo do CSS
        link.rel = "stylesheet"; // Define como folha de estilo
        document.head.appendChild(link); // Adiciona ao <head> do documento

        // Carrega o JavaScript do Mapbox dinamicamente
        const script = document.createElement("script"); // Cria elemento <script>
        script.src = "https://api.mapbox.com/mapbox-gl-js/v3.0.0/mapbox-gl.js"; // Define o endere√ßo do JS
        script.onload = () => { // Executa quando o script √© carregado
            // Obt√©m a localiza√ß√£o do usu√°rio via geolocaliza√ß√£o
            navigator.geolocation.getCurrentPosition(
                (pos) => { // Se conseguir obter a posi√ß√£o
                    const coords = [pos.coords.longitude, pos.coords.latitude]; // Extrai longitude e latitude
                    setLocaliza√ß√£o(coords); // Atualiza o estado com as coordenadas

                    // Inicializa o mapa do Mapbox
                    mapboxgl.accessToken = TOKEN; // Define o token de acesso do Mapbox
                    const map = new mapboxgl.Map({
                        container: mapaRef.current, // Elemento DOM onde o mapa ser√° renderizado
                        style: "mapbox://styles/mapbox/streets-v12", // Estilo do mapa
                        center: coords, // Centraliza o mapa na localiza√ß√£o do usu√°rio
                        zoom: 14, // Define o n√≠vel de zoom
                    });

                    // Adiciona um marcador vermelho na localiza√ß√£o do usu√°rio
                    new mapboxgl.Marker({ color: "#FF0000" }) // Cria marcador vermelho
                        .setLngLat(coords) // Define posi√ß√£o do marcador
                        .setPopup(
                            new mapboxgl.Popup().setHTML(
                                "<strong>Voc√™ est√° aqui!</strong><img src='https://media.giphy.com/media/3o6Zt8MgUuvSbkZYWc/giphy.gif' alt='Localiza√ß√£o' width='100'/>"
                            )
                        ) // Adiciona popup com mensagem e imagem
                        .addTo(map); // Adiciona marcador ao mapa
                },
                () => alert("Erro ao obter localiza√ß√£o") // Se falhar, exibe alerta de erro
            );
        };
        document.body.appendChild(script); // Adiciona o script ao <body>
    }, []); // Executa apenas uma vez ao montar o componente

    return (
        <div className={styles.container}> {/* Container principal com estilos */}
            <div ref={mapaRef} className={styles.mapa} /> {/* Elemento onde o mapa ser√° renderizado */}

            {localiza√ß√£o && ( // Se a localiza√ß√£o estiver dispon√≠vel
                <div className={styles.info}> {/* Exibe informa√ß√µes da localiza√ß√£o */}
                    <h2>üìç Sua Localiza√ß√£o</h2>
                    <p>Latitude: {localiza√ß√£o[1].toFixed(2)}</p> {/* Mostra latitude formatada */}
                    <p>Longitude: {localiza√ß√£o[0].toFixed(2)}</p> {/* Mostra longitude formatada */}
                </div>
            )}
        </div>
    );
}
